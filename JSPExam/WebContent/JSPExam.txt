┌───────────────────────────────────
│	쉽게 배우는 JSP 웹 프로그래밍
│	# 연습문제 주관식 정리
│	# 요약정리를 기반으로 개념 정리
└───────────────────────────────────

01장 JSP개요 : 원리를 이해하고 개발 환경 구축하기

	01. 정적 웹 페이지와 동적 웹페이지의 차이점을 설명하시오.
		
		정적 웹 페이지는 컴퓨터에 저장된 텍스트 파일을 그대로 보는 것이고,
		동적 웹 페이지는 저장된 내용을 다른 변수로 가공 처리하여 보는 것이다
		정적 웹 페이지는 HTML(Hyper Text Markup Language)과 같은 웹 언어로 작성하고,
		동적 웹 페이지는 PHP(Personal Home Page), ASP(Active Server Page), JSP와 같은 웹 언어로 작성합니다.
		
		정적 웹 페이지는 미리 만들어놓은 정보만 보여주기 때문에 고객의 취향이나 변화에 적응할 수 없고,
		새로운 것을 추가, 수정, 삭제하는 작업을 모두 수동으로 처리해야 하므로 관리하기가 어렵습니다.
		하지만 동적인 요소가 없기 때문에 데이터베이스도 필요 없고 구축하기 쉬우며, 단순 문서로만 이루어져있어
		서버 간 통신이 거의 없고 속도가 빠릅니다.
		또한 정적 문서로만 이루어져 있기 때문에 모든 호스팅 서버에서도 동작할 수 있다는 것이 장점입니다.
		그러나 기술이 발전함에 따라 사용자의 기호에 맞게 능동적으로 변화하는 웹 페이지가 필요해져서
		이를 위해 동적 웹 페이지를 제공하는 PHP, ASP, JSP와 같은 언어가 개발되었습니다.
		
		현재 우리가 보는 대부분의 웹 페이지는 동적 웹 페이지라고 할 수 있습니다.
		동적 웹 페이지는 사용자가 웹 페이지에 글을 작성하거나 환경 설정 등을 바꾸면
		그 내용이 서버에 있는 데이터베이스에 저장되고 결과가 웹 페이지에 반영되는 형태로 동작합니다.
		
		
	02. 웹 프로그래밍 언어 JSP의 특징을 설명하시오.
	
		1) JSP는 서블릿 기술의 확장입니다.
		
			JSP에서는 서블릿의 모든 기능을 사용할 수 있습니다.
			즉 서블릿과 마찬가지고 JDBC, JNDI, EJB 등을 모두 포함하고 있는 강력한 엔터프라이즈
			자바 API를 사용할 수 있습니다. 또한 쉽게 개발할 수 있도록 JSP에서는 내장객체, 미리 정의된 태그,
			표현식 언어와 사용자 정의 태그를 사용할 수 있습니다.
			
			*** JNDI란?
			JNDI(Java Naming and Directory Interface)는 Java 프로그래밍 언어를 사용하여
			작성된 어플리케이션에 이름 지정 및 디렉토리 기능을 제공하는 API입니다.
			
			*** EJB란?
			EJB(Enterprise Java Bean)는 분산 어플리케이션을 지원하는 컴포넌트 기반의 규약
			
		2) JSP는 유지 관리가 용이합니다.
		
			서블릿 기술에는 프레젠테이션 로직과 비즈니스 로직이 섞여 있지만 
			JSP기술의 경우 프레젠테이션 로직과 비즈니스 로직을 분리할 수 있기 때문에 관리하기가 쉽습니다.
			
		3) JSP는 빠른 개발이 가능합니다.
			
			코드를 수정했을 때, 서블릿에서는 업데이트를 하고 다시 컴파일해야합니다.
			그러나 JSP의 경우 다시 컴파일 하고 프로젝트를 배포할 필요가 없습니다.
			
		4) JSP로 개발하면 코드 길이를 줄일 수 있습니다.
		
			JSP에서는 다양한 액션태그, JSTL(JavaServer Pages Standard Tag Library),
			사용자 정의 태그 등의 다양한 태그와 표현 언어, 내장 객체 등을 사용함으로써 서블릿보다 코드를 줄일 수 있습니다.
			
	
	03. JSP 페이지의 처리 과정을 설명하시오.
	
		[책 24p 그림 참고] or [ch02 JSP 개요 PPT 9p 그림 참고]
		
		1) 웹 브라우저가 웹 서버에 JSP를 요청합니다.
			웹 서버는 요청된 Hello.jsp에서 jsp 확장자를 발견하여 JSP 페이지임을 확인하고
			웹 서버에 있는 JSP 컨테이너에 전달합니다.
			
		2) JSP 컨테이너는 JSP 페이지를 서블릿 프로그램인 Hello_jsp.java로 변환합니다.
		
		3) JSP 컨테이너가 서블릿 프로그램을 컴파일하여 Hello_jsp.class로 만들고 이를 웹 서버에 전달합니다.
		
		4) 웹 서버는 정적 웹 페이지처럼 *.class 의 실행 결과를 웹 브라우저에 응답으로 전달하므로
			웹 브라우저는 새로 가공된 HTML 페이지를 동적으로 처리한 결과를 보여줍니다.
			
			
			
			
			
02장 스크립트 태그 : 시작 페이지 만들기

	01. 스크립트 태그의 세 가지 종류에 대해 간단히 설명하시오.
	
	 	1) 선언문 태그
	 	
	 		선언문 태그에 선언된 변수와 메소드는 JSP 페이지 임의의 위치에서 선언할 수 있으며,
	 		스크립틀릿 태그보다 나중에 선언해도 스크립틀릿 태그에서 사용할 수 있습니다.
	 		선언문 태그로 선언된 변수는 전역 변수로 사용되고,
	 		선언문 태그로 선언된 메소드는 전역 변수처럼 전역 메소드로 사용됩니다.
	 		
	 		
	 	2) 스크립틀릿 태그
	 	
	 		스크립틀릿 태그 out 객체를 사용하지 않고도 쉽게 HTML 응답을 만들어낼 수 있습니다.
	 		가장 일반적으로 사용되며 변수 또는 메소드 선언, 유효식 등 다수를 포함할 수 있습니다.
	 		모든 텍스트, HTML, 또는 JSP 요소는 스크립틀릿 태그 외부에 있어야합니다.
	 		
	 	3) 표현문 태그
	 	
	 		표현문 태그를 이용하여 선언문 태그 또는 스크립틀릿 태그에서 선언된 변수나 메소드의 반환 값을
	 		외부로 출력할 수 있습니다.
	 		표현문 태그는 스크립틀릿 태그에서 사용할 수 없으므로 이 경우에는 out.println() 메소드를
	 		사용해야 합니다.
	 		표현문 태그에 숫자, 문자, 불린 등의 기본 데이터 타입과 자바 객체 타입도 사용 가능합니다.
	 		그리고 표현문 태그에 작성된 모든 자바 코드의 값은 문자열로 반환되어 웹 브라우저에 출력됩니다.
	 		
	 02. 선언문 태그와 스크립틀릿 태그의 차이점을 설명하시오.
	 
	 	───────────────────────────────────────────────────────────────────────────────
	 	           선언문 태그                                    │        스크립틀릿 태그
	 	───────────────────────────────────────────────────────────────────────────────
	 	변수 뿐만 아니라 메소드를 선언할 수 있다.      │   메소드 없이 변수만을 선언할 수 있다
	 	 서블릿 프로그램으로 변환될 때,              │   서블릿 프로그램으로 변환될 때, 
	 	_jspService 메소드 외부에 배치됩니다            │  _jspService 메소드 내부에 배치됩니다.
		───────────────────────────────────────────────────────────────────────────────
		
	03. 애플리케이션 실행 결과에는 보이지 않는 JSP 주석 표기법은 무엇인가?
	
		<%-- JSP 주석 처리 내용 --%>
		<!-- HTML주석 처리 내용 -->	
			


03장 디렉티브 태그 : 한글 출력 및 페이지 모듈화 하기

	01. 디렉티브 태그의 세 가지 유형에 대해 간단히 설명하시오.
		
		────────────────────────────────────────────────────────────────────────────────
		디렉티브 태그          │    형식                             │   설명
		────────────────────────────────────────────────────────────────────────────────
		page             │ <%@ page ... %>         │ JSP 페이지에 대한 정보를 설정합니다.
		include          │ <%@ include ... %>      │ JSP 페이지의 특정 영역에 다른 문서를 포함합니다.
		taglib           │ <%@ taglib ... %>       │ JSP 페이지에서 사용할 태그 라이브러리를 설정합니다.
		────────────────────────────────────────────────────────────────────────────────
		
		
	02. JSP 페이지가 사용할 자바 클래스를 설정하기 위한 page 디렉티브 태그의 속성은 무엇인가?
		
		import
		
	03. JSP 페이지의 특정 영역에 외부 파일의 내용을 포함하는 디렉티브 태그는 무엇인가?
	
		include
		
		
04장 액션 태그 : 상품 목록 표시하기

	01. 자바빈즈
	
		JSP 페이지의 주요 기능 중 하나는 데이터를 보여주는 것입니다. 하나의 JSP 페이지에 데이터를 보여주기 위한
		자바 코드와 단순히 화면을 출력하는 HTML 코드를 함께 작성하면 기능을 확장하거나 코드를 재사용하는데
		어려움이 있습니다. 따라서 프로그램의 효율을 높이기 위해 화면을 출력하는 부분과 데이터를 처리하는 로직 부분을
		구분하여 작성하며, 로직 부분의 코드에 자바빈즈라는 클래스를 사용합니다.
		
		자바빈즈는 동적 콘텐츠 개발을 위해 자바 코드를 사용하여 자바 클래스로 로직을 작성하는 방법입니다.
		즉, JSP 페이지에 화면을 표현하기 위한 계산식이나 자료의 처리를 담당하는 자바코드를 따로 분리하여
		작성하는 것이 자바빈즈입니다.
		자바빈즈는 데이터 표현을 목적으로 하는 자바 클래스이므로 기존의 자바 클래스를 작성하는 방법과 동일하게
		작성합니다.
		
		- VO와 같은 데이터를 저장할 클래스 공간에 해당한다.
		- 추후 스프링에서 데이터를 바인딩할 때(데이터를 받아들일 때) VO, 즉 자바빈즈 클래스 객체타입으로
			데이터를 바로 받아낼 수 있다.
			
	02. 페이지 이동방식
	
		1) forward
			
		예를 들어 게시판 등록 페이지를 요청한다고 가정합시다.
		요청 URL이 http://localhost/board/form.do 일 때, 서버로 넘어간 요청 (request)에 해당하는
		최종 목적지(servlet)가 있고 그 안에서 등록 폼에 해당하는 페이지를 요청하는 기능이 실행된다.
		요청 URL에 매핑되는 서버 내 리소스(/WEB-INF/views/board/form.jsp)는 보안 폴더에 해당하는
		/WEB-INF/ 안에 있으므로 서버안에서 응답으로 나가야할 페이지를 찾아서 결과물을 만들고 응답을
		브라우저 쪽으로 던져주는데,이 과정이 페이지 이동방식 포워드입니다.
		포워드는 서버로 들어온 요청(request)과 요청에 의한 처리가 완료 후 응답(response)으로 나가는
		횟수가 각 1개씩 존재한다.
		만약에 서버로 들어올 때 데이터 1개 또는 2개 이상을 갖고 들어왔을 때 포워드는 새로운 요청이 만들어져
		응답으로 나가는 형태가 아니므로 같은 요청(request)객체를 활용하여 데이터를 담아 응답으로 내보낼 수 있고
		처음에 요청으로 들어온 데이터를 응답에서 또한 활용할 수 있다.
		
		
		2) redirect
		
		예를 들어 게시판 등록 기능을 요청한다고 가정합시다
		요청 URL이 http://localhost/board/insert.do 일 때, 서버로 넘어간 요청(request)에 해당하는
		최종 목적지(servlet)에 도착한다. 이 때, 등록 기능에 대한 데이터 처리 후 페이지 이동방식을 선택하여
		응답으로 나가야하는데, 응답으로 나갈 페이지가 데이터 처리 후 목록 화면이라고 가정했을 때,
		시스템이 알아서 브라우저로 300번대 ACK 신호로 "데이터 처리 끝났고 목록 화면으로 넘어가라고 하는데
		진짜 목록 화면으로 넘어가면 됨?"이라고 물어봅니다. 브라우저는 서버가 300번대로 준 신호에 "어! 나 목록
		화면 가는거 맞음! 그러니까 내가 다시 목록 화면 요청할테니까 목록 화면 응답으로 줘!" 라고 하며 서버로 새로운
		요청 http://localhost/board/list.do를 요청하여 목록 화면을 달라고 서버로 요청한다.
		서버는 다시 들어온 새로운 요청(request)에 목록 화면을 서버 안에서 찾아 결과의 리소스를 만들어 응답으로
		내보낸다. 이때 최초 요청은 등록 기능을 가진 URL이었지만 응답으로 나가는 건 목록을 요청할 때 사용하는
		요청 URL이 되고 응답 화면은 목록 화면이 나간다.
		
			*** 데이터 처리 후 포워딩을 하면?
			데이터 처리 후 리다이렉트를 하지 않고 포워딩을 할 때 문제점은, 포워딩의 특징은 최초 요청 URL이 고정되고
			선택된 응답 페이지가 결과로 나가기 때문에 다시 새로고침을 할 경우 최초의 요청했던 기능을 담고 있는 URL이
			실행됩니다.
			그렇게 되면 반복적인 데이터 처리 요청이 서버로 날라가는 것이기 때문에 요청자가 끝내지 않는 한 무한반복으로
			데이터 처리에 대한 기능이 끝없이 요청될 수 있습니다. 그러므로 데이터 처리 후라면 페이지 이동방식은
			포워딩이 아닌 리다이렉트 처리로 마무리합니다!!
			
			
			
5장 내장객체 : 상품 상세 정보 표시하기

	01. 폼 페이지에서 입력된 데이터를 전달하는 요청 파라미터 값을 JSP페이지로 가져오는 내장객체는 무엇인지,
	그리고 관련된 메소드에 대해 간단히 설명하시오.
	
		request 내장 객체
		
		────────────────────────────────────────────────────────────────────────────────────────
		요청 파라미터 관련 메소드              │    형식                  │   설명
		────────────────────────────────────────────────────────────────────────────────────────
		getParameter(String name)    │ String           │ 요청 파라미터 이름이 name인 값을 전달받습니다.
									 │                  │ 요청 파라미터 값이 없으면 null 반환
		────────────────────────────────────────────────────────────────────────────────────────
		getParameterValues			 │ String[]			│ 모든 요청 파라미터 이름이 name인 값을 
		(String name)				 │					│ 배열 형태로 전달받습니다. 
									 │					│ 요청 파라미터값이 없으면 null을 반환
		────────────────────────────────────────────────────────────────────────────────────────
		getParameterNames()			 │ Enumeration		│ 모든 요청 파라미터의 이름과 값을
									 │					│ Enumeration 객체 타입으로 전달받음
		────────────────────────────────────────────────────────────────────────────────────────
		getParameterMap()			 │ Map				│ 모든 요청 파라미터의 이름과 값을 Map객체
									 │					│ 타입으로 전달받습니다.(Map 객체 타입은 
									 │					│ (요청 파라미터 이름, 값)형식으로 구성)
		────────────────────────────────────────────────────────────────────────────────────────
		 			
			
	02. 서버에서 웹 브라우저에 다른 페이지로 강제 이동하도록 명령하는 내장 객체와 관련된 메소드는 무엇인가?
	
		response 내장 객체
		
		────────────────────────────────────────────────────────────────────────────────────────
		페이지 이동 관련 메소드              │   반환 유형                  │   설명
		────────────────────────────────────────────────────────────────────────────────────────
		sendRedirect(url)		   │   void   	         │ 설정한 URL 페이지로 강제 이동합니다.
		────────────────────────────────────────────────────────────────────────────────────────


	03. 스크립트 태그의 표현문과 같이 데이터를 출력하는 내장 객체는 무엇인가?
	
		out 내장 객체		
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			